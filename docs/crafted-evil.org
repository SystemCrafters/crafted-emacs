* Crafted Emacs Evil Module

** Installation

To use this module, simply require it in your config.

#+begin_src emacs-lisp
(require 'crafted-evil)
#+end_src
                                                 
** Description

This module installs and sets up four packages to emulate and extend [[https://www.vim.org/][Vim's]] modal editing model.

+ [[https://github.com/emacs-evil/evil][Evil]]: A minor mode that adds Vim-like modal editing, visual selection, and text objects to Emacs
+ [[https://github.com/emacs-evil/evil-collection][Evil-collection]]:  Vim-like bindings for modes not covered by default in Evil
+ [[https://elpa.gnu.org/packages/undo-tree.html#:~:text=The%20%60undo%2Dtree%2Dmode,of%20never%20losing%20any%20history][Undo-tree]]: Visualizes changes made in your file as a tree
+ [[https://github.com/redguardtoo/evil-nerd-commenter][Evil-nerd-commenter]]: Allows easy commenting of code for many different file types.

More information can be found about each of these packages on their respective pages linked above.

If this module is included in your configuration file, evil-mode, along with evil-collection and evil-nerd-commenter will be enabled by default. To toggle evil-mode on or off run =M-x evil-mode=.

The undo history of a file can be visualized using =M-x undo-tree-visualize= which is bound by default to =C-x u=. The history can then be navigated through using the arrow keys.

** Customization Variables

This module provides two customizable variables

+ =crafted-evil-discourage-arrow-keys=
+ =crafted-evil-vim-muscle-memory=.

When =crafted-evil-discourage-arrow-keys= is true, arrow keys are disabled in normal and visual mode. When you attempt to use the arrow keys a message will pop up reminding you to use the =HJKL= keys instead.

When =crafted-evil-vim-muscle-memory= is true, the variables =evil-want-C-i-jump=, =evil-want-Y-yank-to-eol=, and =evil-want-fine-undo= are all set to true. By default, they are nil. Setting these to true allows Evil to overwrite some of the default Emacs keybindings to allow for a more Vim-like experience.

Setting =evil-want-C-i-jump= to true sets =C-i= to jump forward, as in Vim. The default behavior is to insert a tab character.

When =evil-want-Y-yank-to-eol= is true =Y= yanks to the end of the line. The default behavior if to yank the whole line.

Finally, setting =evil-want-fine-undo= to true allows an action, such as an insert, to be broken into separate steps. For example, if, while in the insert state, you performed a delete operation after a change operation setting this variable to true would allow it to be undone in multiple steps. If it is set to nil then an action, like the one described above, will be undone all at once. 

Each package this module installs might have additional variables that can be modified to change its behavior. Please refer to the documentation for those packages for more information.

** Some default settings

For your convenience, the following settings have been set by default.

+ =evil-respect-visual-line-mode= is set to t, causing Evil's motion commands to act on visual lines rather than logical lines.
+ The following modes are set to open up in Emacs state (using Emacs' default keybindings) when they start
  + custom-mode
  + eshell-mode
  + term-mode
+ The following keybindings have been added

  | Key-Chord | Function                             | Keymap                  |
  |-----------+--------------------------------------+-------------------------|
  | =C-g=     | =evil-normal-state=                  | =evil-insert-state-map= |
  | =C-M-u=   | =universal-argument=                 | =current-global-map=    |
  | =C-h=     | =evil-delete-backward-char-and-join= | =evil-insert-state-map= |
  | =j=       | =evil-next-visual-line=              | =evil-motion-state-map= |
  | =k=       | =evil-previous-visual-line=          | =evil-motion-state-map= |
