* Starting from scratch

The person who is starting from scratch is likely in one of the following categories:

- New to Emacs.
- Not new to Emacs, but coming from another starter kit
- Not new to Emacs, but choosing to throw away whatever configuration they have
  and start over from scratch - also known as /"Emacs configuration bankruptcy"/

Each category has different concerns, but we'll approach this from the
perspective of the brand new Emacs user.  If you are more familiar with Emacs,
you'll be able to skim this section for the code examples and move from there.

** Prerequisites

    First, we need to make sure we are starting with a clean slate.  If you are
    starting from scratch, but have started Emacs and tried changing any of the
    configuration options, you have that laying about which can confuse things.
    If the following exist, you must decide if you wish to remove them or rename
    them to something else. 

    - In your home folder, the file ~.emacs~ or ~_emacs~.
    - In your home folder, the directory ~.emacs.d~ or ~_emacs.d~.
    - In your home folder, the directory ~.config/emacs~

    You'll also need to clone this project somewhere, the easiest is in your
    home folder.

    #+begin_src shell
      git clone https://github.com/SystemCrafters/crafted-emacs

      # N.B. As this is still a beta release, make sure to also execute the following command:

      git checkout craftedv2beta
    #+end_src

    For the rest of this document, the location where you checked out Crafted
    Emacs will be known as ~crafted-emacs-home~.

** Early Emacs Initialization

    The Emacs startup process has several steps, more than what will be
    discussed here.  We will briefly cover the ~early-init.el~ file which Emacs
    allows user to affect some configuration options which occur before Emacs
    draws the initial frame (often known as the "window" in a graphical
    windowing system).  For more information about this file, see the entry in
    the Emacs info system: [info:emacs#Early Init File][Early Init File]], or on the web: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][Early Init File]].

    Emacs looks for initialization files in several defined places.  For our
    purposes, we will be using the directory ~.emacs.d~ in your home folder.  If
    you removed this directory in the last step, we now need to create that
    directory so we can put our initialization files there.  If you are using a
    Linux or MacOS system and prefer to follow the Freedesktop guidelines, then
    create the path ~.config/emacs/~ instead.

    If you are on a recent version of Microsoft Windows, either location will
    work.  Sometimes you need to look in the ~%USERPROFILE%/AppData/Roaming~
    folder to find either the ~.emacs.d~ or ~.config/emacs~ folder.  In some
    cases ~%HOME%~ will point to ~%USERPROFILE%/AppData/Roaming~ already.  Older
    versions of Microsoft Windows may refer to ~_emacs.d~ instead.

    From now on, we will call this the ~user-emacs-directory~, and all of our
    work will be in that folder.

    For our purposes, this is where we initialize the package system.  These steps
    are optional.  In the ~user-emacs-directory~:

    1. Create a file called ~early-init.el~
    2. Add this single line of code (which assumes the ~crafted-emacs-home~ is
       the ~crafted-emacs~ directory found in your home folder):

       #+begin_src emacs-lisp
         (load "~/crafted-emacs/modules/crafted-early-init-config")
       #+end_src

    For more detail on how the package system is configured for /Crafted Emacs/,
    see the info page: [[info:crafted-emacs.info#Configuring a package manager][Configuring a package manager]] or, if you are reading this
    locally, see: [[file:crafted-package.org][crafted-package.org]]


** Emacs Initialization

    The ~init.el~ file is where most of the work of configuring Emacs will
    occur.  Let's start by creating the ~init.el~ file in your
    ~user-emacs-directory~ and add this code:

    #+begin_src emacs-lisp
      (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
      (when (and custom-file
                 (file-exists-p custom-file))
        (load custom-file nil :nomessage))

      (load "~/crafted-emacs/modules/crafted-init-config")
    #+end_src

    Emacs customization is largely a matter of setting the values of certain
    variables.  The Emacs customization system will store these in the file
    known as the ~custom-file~ which defaults to your initialization file, in
    this case called ~init.el~.  We'd rather keep that separate from what we are
    doing in the ~init.el~ file as that code is auto-generated by Emacs.  In a
    sense, it is a duplication of the work we will be doing as the values we set
    programmatically will also be stored in this file and loaded by the code in
    lines 2-4 above.  Line six adds the ~modules~ folder from the
    ~crafted-emacs-home~ directory to the Emacs ~load-path~ variable so Emacs
    knows where to look to get the customizations we will apply going forward.

*** Basic Configuration

    At this point, Emacs is still in it's mostly "out of the box"
    state.  Some people will prefer to stop at this point, but most
    will prefer to continue to customize their configuration.  To move
    to the next step, add the following to the bottom of your
    initialization file:

    #+begin_src emacs-lisp
      (require 'crafted-defaults-config)
    #+end_src

    This will turn on and configure the following features in Emacs:

    + Auto revert mode - this will keep your buffers up-to-date if
      they are changed outside of Emacs.
    + Delete selection mode - most people expect to delete or replace
      text they have highlighted, this turns on that behavior.
    + Using tabs is turned off - this makes using spaces the default
      method of indentation and helps when sharing files with others.
    + Recent files mode - this keeps track of the files you have
      opened recently so you can open them again more quickly next
      time.  A menu option is added to the file menu so you can find
      the list of files you recently opened.
    + Scrolling is enhanced to make it less stuttered.
    + Long lines are handled more gracefully.
    + Shell scripts are made to be executable on save automatically.
    + Window navigation keybindings are set, and undo/redo for window
      layouts is turned on so once you have your windows laid out to
      your liking, if something changes the layout, you can undo those
      changes and get your window layout back.
    + The built in completion is configured to launch on the TAB key.
      This includes vertical completions are turned on in the
      minibuffer (that area below the modeline at the bottom of the
      frame).
    + Certain windows, like the Help, Completions and Dictionary
      windows are configured for buffer reuse, window height and
      location.
    + Using dictionary to look up words is bound to a key, and the
      spell checker is turned on (if you have ~ispell~ or ~aspell~
      installed)
    
    We believe this is a nicely configured base Emacs.  No packages
    need to be installed for this configuration, but adding a few can
    further enhance your Emacs experience.  We'll talk more about
    that later in this guide.  For now, congratulations!  You have a
    nicely configured and usable Emacs.

    If you are very new to Emacs, you might take a moment here to go
    read through Mickey Petersen's "Mastering Emacs" book.  You can
    get a copy from [[https://masteringemacs.org/r/systemcrafters][here]].

* Starting from an existing configuration

If you aren't starting from scratch, then you probably have some configuration
already working and you want to add or use some of the configuration found in
Crafted Emacs.

To start, clone this repository.  Going forward, we will assume you did this in
your home folder and will refer to this as ~crafted-emacs-home~.

After cloning the Crafted Emacs repo, to use the modules, you need to add the
following to your configuration:

#+begin_src emacs-lisp
  ;; This assumes you cloned Crafted Emacs in you home directory, if you
  ;; didn't, make sure to update the path to correctly reflect the
  ;; location on your system.
  (load "~/crafted-emacs/modules/crafted-init-config")
#+end_src

This adds the ~crafted-emacs/modules~ folder to the ~load-path~.  If you need to
have packages installed, look for modules ending with ~*-packages.el~, if you
only want the configuration, then the modules ending with ~*-config.el~ will be
what you want.

In this example, we setup the ~custom-file~, which is used by Emacs to store
configuration settings as well as to remember.  Next we load the
~crafted-init-config~ file to setup the ~load-path~.  Finally, we add the
completions packages and configuration modules.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (and custom-file
             (file-exists-p custom-file))
    (load custom-file nil :nomessage))

  (load "~/crafted-emacs/modules/crafted-init-config")
  (require 'crafted-completion-packages)  ; must come first to install
                                          ; the packages

  (package-install-selected-packages :noconfirm) ; install the packages
                                                 ; from the bundle
                                                 ; mentioned above.

  (require 'crafted-completion-config)
#+end_src


** Crafted Modules with ~use-package~

   Some people prefer to use the very popular (and built-in to Emacs 29)
   ~use-package~ configuration tool.  Here is an example similar to the previous
   one.

   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     ;; must come first to install the packages
     (require 'crafted-completion-packages)
     (package-install-selected-packages :noconfirm)

     ;; configure vertico
     (use-package 'vertico
       :init
       (require 'vertico-directory)
       :config
       (customize-set-variable 'vertico-cycle t)
       (vertico-mode 1))

     ;; more configuration for completion packages would go here
   #+end_src

** Crafted modules with externally installed Emacs packages

   Here, we assume you use ~guix-home~, ~NixOS Home Manager~ or other similar
   tool to install Emacs packages from your operating system software library.
   We continue with another iteration on the previous example, in this case we
   will assume something like the following ~guix-home~ configuration:

   #+name: guix-home snippet
   #+begin_src scheme
     (home-environment
      (packages (specifications->packages
                 (list
                  "emacs"
                  "emacs-vertico"
                  "emacs-corfu"
                  ;; other emacs packages
                  )))
   #+end_src

   Then, in the ~init.el~ file, the following snippet can be used to configure
   the packages installed above:

   #+name: Emacs init.el snippet
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     ;; since the packages are already installed, we only need to use the
     ;; config module to configure them.
     (require 'crafted-completion-config)
   #+end_src

-----
# Local Variables:
# fill-column: 80
# eval: (auto-fill-mode 1)
# End:
