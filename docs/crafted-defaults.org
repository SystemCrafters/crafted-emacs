* Crafted Emacs Defaults Module

** Installation

To use this module, simply require them in your =init.el= at the appropriate
points.

#+begin_src emacs-lisp
;; No additional packages are installed by this module.

;; install the packages
(package-install-selected-packages :noconfirm)

;; Load crafted-updates configuration
(require 'crafted-defaults-config)
#+end_src

** Description

The ~crafted-defaults~ module provides a variety of sensible settings that are
commonly held to be universally useful for Emacs users.

These defaults have been grouped into loose categories. However, most of them
make sense on their own. So feel free to pick and choose.

To make this cherry-picking easier, the following documentation presents each
setting with the default we chose (usually in the format "variable : value"),
followed by instructions on how to /change/ the setting if you /don't/ want to use
the default.

** Buffers

- ~global-auto-revert-non-file-buffers~ : =t=

  Automatically update buffers not backed by files (e.g. a directory listing in
  dired) if they are changed outside Emacs (e.g. by version control or a file
  manager).

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'global-auto-revert-non-file-buffers nil)
  #+end_src

- ~global-auto-revert-mode~

  Activate a global minor mode to revert any buffer when it changes either on
  disk or via another process (see above). Affects file buffers, too.

  To turn this off, add this code to your config:

  #+begin_src emacs-lisp
    (global-auto-revert-mode -1)
  #+end_src

- ~dired-dwim-target~ : =t=

  When dired shows two directories in separate dired buffers and you use copy
  or move commands in one of them, dired will assume the other directory as
  target directory.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'dired-dwim-target nil)
  #+end_src

- ~dired-auto-revert-buffer~ : =t=

  When revisiting a directory, automatically update dired buffers.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'dired-auto-revert-buffer nil)
  #+end_src

- ~eshell-scroll-to-bottom-on-input~ : =this=

  In eshell buffers, scroll to the bottom on input, but only in the selected
  window.

  You can change this in your config by setting it to =all= (for all windows)
  or to =nil= to turn it off altogether, either by using the Customization UI
  or by adding code like this:

  #+begin_src emacs-lisp
    (customize-set-variable 'eshell-scroll-to-bottom-on-input nil)
  #+end_src

- ~switch-to-buffer-in-dedicated-window~ : =pop=

  Pop up dedicated buffers in a different window.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'switch-to-buffer-in-dedicated-window nil)
  #+end_src

  See the documentation for ~switch-to-buffer-in-dedicated-window~ for more
  options.

- ~switch-to-buffer-obey-display-actions~ : =t=

  Treat manual buffer switching (C-x b for example) the same as programmatic
  buffer switching.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'switch-to-buffer-obey-display-actions nil)
  #+end_src

- use ibuffer to list buffers

  Prefer the more full-featured built-in ibuffer for managing buffers.

  You can change this back to the Emacs default by adding this code to your
  config:

  #+begin_src emacs-lisp
    (keymap-global-set "<remap> <list-buffers>" #'list-buffers)
  #+end_src

- ~ibuffer-movement-cycle~ : =nil=

  When using ibuffer, turn off cycling forward and backward.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'ibuffer-movement-cycle t)
  #+end_src

- ~ibuffer-old-time~ : 24

  In ibuffer, consider buffers "old" after 24 hours.

  Change this setting either by finding it in the Customization UI or by adding
  code like this to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'ibuffer-old-time 72)
  #+end_src

** Completion

- ~fido-vertical-mode~, ~icomplete-vertical-mode~ or ~icomplete-mode~

  Turn on the best completion-mode available:

  - In Emacs 28 or later, turn on ~fido-vertical-mode~.
  - In earlier versions, if the additional package ~icomplete-vertical~ is
    installed, turn on ~icomplete-vertical-mode~.
  - Otherwise, turn on ~icomplete-mode~.

  You can change this by turning off the respective mode in your config, e.g.
  like this:

  #+begin_src emacs-lisp
    (fido-vertical-mode -1)
  #+end_src

  Note:
  - To install ~icomplete-vertical~, add the following code to the packages phase
    of your config:

  #+begin_src emacs-lisp
    (add-to-list 'package-selected-packages 'icomplete-vertical)
  #+end_src
   
  - If you also use ~crafted-completion-config~ and have the package ~vertico~
    installed, all of these modes will be turned off in favour of ~vertico~.


The following settings will apply, no matter which completion mode you use.

- ~tab-always-indent~ : =complete=

  When hitting the TAB key, Emacs first tries to indent the current line.
  If it is already indented, it tries to complete the thing at point.

  To change this, see the documentation of ~tab-always-indent~ and change it in
  your config (or the Customizations UI) to reflect the desired behaviour, e.g.:

  #+begin_src emacs-lisp
    (customize-set-variable 'tab-always-indent nil)
  #+end_src

- ~completion-cycle-threshold~ : 3

  When selection completion candidates, setting this variable uses cycling, i.e.
  completing each of the candidates in turn. This set it up to use cycling as
  long as there are not more than three candidates.

  You can change this by setting it to another number, to =t= for cycling always,
  or to =nil= to turn it off altogether, e.g. by adding this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'completion-cycle-threshold 3)
  #+end_src

- ~completion-category-overrides~ : =file= : =partial-completion=

  When completing file names, this settings allows for partial completion. When
  you type part of the filename Emacs will complete the rest if there's no
  ambiguity, or offer choices if there are multiple possible candidates.

  You can revert this setting by adding the following code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'completion-category-overrides nil)
  #+end_src

  Or see the documentation of the variable for alternatives. You can also use
  it for other category specific completion settings. For example, you can use
  it to specify a different ~completion-cycle-threshold~ (see above) for files
  and buffers respectively.

- ~completions-detailed~ : =t=

  Display completions with details (for example in C-h o).

  You can change this by adding the following code to your config:

  #+begin_src emacs-lisp
    (customize-set 'completions-detailed nil)
  #+end_src

- ~xref-show-definitions-function~ : ~xref-show-definitions-completing-read~

  When using a definition search, and there is more than one definition, let
  the user choose between them by typing in the minibuffer with completion.

  You can change this back to Emacs' default by adding the following code to
  your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'xref-show-definitions-function
                            #'xref-show-definitions-buffer)
  #+end_src


** Editing

- ~delete-selection-mode~

  Typed text replaces the selection if the selection is active, pressing delete
  or backspace deletes the selection.

  To turn this off, add this code to your config:

  #+begin_src emacs-lisp
    (delete-selection-mode -1)
  #+end_src

- ~indent-tabs-mode~ : =nil=

  Only indent using spaces.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'indent-tabs-mode t)
  #+end_src

- ~kill-do-not-save-duplicates~ : =t=

  The ~kill-ring~ is where Emacs stores the strings to paste later. This variable
  prohibits Emacs from storing duplicates of strings which are already on the
  ~kill-ring~.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'kill-do-not-save-duplicates nil)
  #+end_src

- ~bidi-paragraph-direction~ : =left-to-right=

  Force directionality of text paragraphs in the buffer. Crafted Emacs sets
  the default value as =left-to-right=, which means for buffers which don't have
  their own value, this one will be used.

  You can change this through the Customization UI or by adding the following
  code in config:

  #+begin_src emacs-lisp
    (customize-set-variable 'bidi-paragraph-direction 'right-to-left)
  #+end_src

- ~bidi-inhibit-bpa~ : =t=

  This setting will inhibit the Bidirectional Parentheses Algorithm, which
  makes redisplay faster.

  You can change the value of this variable by adding this code to your config:

  #+begin_src emacs-lisp
    (setq bidi-inhibit-bpa nil)
  #+end_src

- ~global-so-long-mode~

  Improve performance for files with excessively long lines.

  This minor mode can be turned off in your config by adding:

  #+begin_src emacs-lisp
    (global-so-long-mode -1)
  #+end_src

- Look up dictionary definitions

  Using =M-#= will lookup the word at point in a dictionary. See the documentation
  of ~dictionary-lookup-definition~ or the README of the built-in =dictionary.el=
  for details (https://github.com/myrkr/dictionary-el). It is set up to show
  dictionary definitions in a side window on the left (see the settings for
  Special Windows below).

  You can unset this keybinding by adding this code to your config:

  #+begin_src emacs-lisp
    (keymap-global-unset "M-#")
    ;; or, for older Emacs versions:
    (global-unset-key "M-#")
  #+end_src

- Flyspell Mode

  If ~ispell~ is available, this module automatically turns on ~flyspell-mode~
  for text-mode and for the comments in prog-mode.

  You can change this by adding this code to your config:

  #+begin_src emacs-lisp
    (remove-hook 'text-mode-hook 'flyspell-mode)
    (remove-hook 'prog-mode-hook 'flyspell-prog-mode)
  #+end_src

** Navigation

If you have the packages ~hydra~ and ~dumb-jump~ installed, this module adds a hydra
definition for dumb-jump and binds it to =C-M-y=.

You can change that binding by adding this code to your config, replace =C-M-y=
by the key stroke you prefer:

  #+begin_src emacs-lisp
    (keymap-set dumb-jump-mode-map "C-M-y" #'dumb-jump-hydra/body)
  #+end_src

You can also use the ~defhydra~ command to overwrite the hydra. See the
documentation of the hydra package for details.

** Persistence

- ~recentf-mode~

  This minor mode saves the files you visit as a recent file so you can load
  that file again quickly. The command ~recentf-open-files~ will display a menu
  of files you opened recently so you can quickly open it again. This mode is
  added to the ~after-init-hook~ which runs when Emacs is starting but after the
  initialization files have completed running.

  You can change the location of the recent file by adding this to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'recentf-save-file "/some/path/to/recentf")
  #+end_src

  You can turn off this behaviour by adding this to your config:

  #+begin_src emacs-lisp
    (remove-hook 'after-init-hook 'recentf-mode)
  #+end_src

- ~savehist-mode~

  This minor mode saves minibuffer history in the =history= file. You can change
  the location of the file with the Customization UI or by adding the following
  to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'savehist-file
                            "/path/to/minibuffer/history/file")
  #+end_src

  You can turn off this mode by adding this code to your config:

  #+begin_src emacs-lisp
    (savehist-mode -1)
  #+end_src

- ~bookmark-save-flag~ : 1

  Save bookmarks to file every time you make or delete a bookmark.

  To change this, see the documentation of ~bookmark-save-flag~ for valid values
  and then add code like this to your config (e.g. to never save bookmarks):

  #+begin_src emacs-lisp
    (customize-set-variable 'bookmark-save-flag nil)
  #+end_src

** Windows

- ~winner-mode~

  Enable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] and provides a set of keybindings that help you navigate
  through multiple windows.

  ~winner-mode~ is a minor mode that, when activated, allows you to revert to a
  prior windows arrangement. It provides two functions to allow this:
  ~winner-undo~ and ~winner-redo~. These take you to earlier and later windows
  arrangements respectively.

  To store the keybindings associated with this module, a new keymap is
  created: ~crafted-windows-key-map~, Additionally, this module defines a custom
  variable, ~crafted-windows-prefix-key~, which allows you to set the prefix key
  to the keymap. By default, this is set to =C-c w=, but you are free to change
  it.

  To do so, replace ~C-c w~ with the desired keystrokes in code like this in your
  config:

  #+begin_src emacs-lisp
    (with-eval-after-load 'crafted-defaults-config
      (customize-set-variable 'crafted-windows-prefix-key "C-c w")
      (keymap-global-set crafted-windows-prefix-key 'crafted-windows-key-map))
  #+end_src


  Using the default prefix-key, the keybindings defined in this module are

  | Key Chord | Function       | Description                            |
  |-----------+----------------+----------------------------------------|
  | C-c w u   | winner-undo    | Reverts to the previous windows layout |
  | C-c w n   | windmove-down  | Moves point to window below            |
  | C-c w p   | windmove-up    | Moves point to window above            |
  | C-c w b   | windmove-left  | Moves point to window to the left      |
  | C-c w f   | windmove-right | Moves point to window to the right     |

  If you want to change the keybindings, add code like this to your config:

  #+begin_src emacs-lisp
    (keymap-set 'crafted-windows-key-map "d" 'windmove-down)
  #+end_src

  If you want to turn off the mode altogether, add this code to your config:

  #+begin_src emacs-lisp
    (winner-mode -1)
  #+end_src

- ~auto-window-vscroll~ : =nil=

  Turn off the automatic adjustment of ~window-vscroll~ to view tall lines.
  Together with the following four settings, this makes scrolling less
  stuttered.

  To change this, add this code to your config:

  #+begin_src emacs-lisp
    (setq auto-window-vscroll t)
  #+end_src

- ~fast-but-imprecise-scrolling~ : =t=

  Improves scrolling speed by not rendering fontification updates unless the
  text would actually be visible in the buffer. Applies when scrolling very
  fast. Together with other settings in this section, this
  makes scrolling less stuttered.

  Change this setting either by finding it in the Customization UI or by adding
  this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'fast-but-imprecise-scrolling nil)
  #+end_src

- ~scroll-conservatively~ : 101

  If the point moves off the screen, redisplay will scroll by up to 101 lines
  to bring it back on the screen again. If that is not enough, redisplay will
  recenter. Together with other settings in this section, this
  makes scrolling less stuttered.

  Change this setting either by finding it in the Customization UI or by
  adding code like this to your config, setting the number to the desired amount.
  Setting it to 0 will make it recenter all the time:

  #+begin_src emacs-lisp
    (customize-set-variable 'scroll-conservatively 0)
  #+end_src


- ~scroll-margin~ : 0

  Turn off automatic scrolling when the point comes near to the bottom or top
  of the window. Together with other settings in this section, this makes
  scrolling less stuttered.

  To change this, set ~scroll-margin~ to a number of lines within which automatic
  scrolling should be triggered, e.g.

  #+begin_src emacs-lisp
    (customize-set-variable 'scroll-margin 5)
  #+end_src

- ~scroll-preserve-screen-position~ : =t=

  When scrolling, move the point to keep its screen position unchanged.
  Together with other settings in this section, this makes scrolling less
  stuttered.

  Change this value in the Customization UI or by adding this code to config:

  #+begin_src emacs-lisp
    (customize-set-variable 'scroll-preserve-screen-position nil)
  #+end_src

- ~Man-notify-method~ : =aggressive=

  Open man pages in their own window, and switch to that window to facilitate
  reading and closing the man page.

  You can change this back to Emacs' default by adding this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'Man-notify-method 'friendly)
  #+end_src

  See the documentation of ~Man-notify-method~ for other valid values.

- ~ediff-window-setup-function~ : =ediff-setup-windows-plain=

  When using Ediff, keep the control panel in the same frame.

  You can change this back to Emacs' default by adding this code to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'ediff-window-setup-function
                            'ediff-setup-windows-default)
  #+end_src

  See the documentation of ~ediff-window-setup-function~ for details.

- Special windows - ~display-buffer-alist~

  Define rules how Emacs opens some special windows.

  - =*Completions*= :: If two windows are open, use not the current one, but the
                     other one. If only one window is open, open a new one.
                     If the new window is created by a horizontal split, Emacs
                     tries to limit the window height to 10 lines.
  - =*Dictionary*=  :: In a new window on the left.
  - =*Help*=        :: If two windows are open, use not the current one, but the
                     other one. If only one window is open, open a new one.

  To change this, see the documentation of ~display-buffer-alist~.

** Miscellaneous

- ~load-prefer-newer~ : =t=

  When both a compiled (.elc or .eln) and an uncompiled (.el) variant of a
  source file is present, load whichever is newest. This prevents puzzling
  behaviour when you change something in your code but unless you recompile,
  Emacs will load an out-of-date state of your code.

  To change this, either find it in the Customization UI or by adding this code
  to your config:

  #+begin_src emacs-lisp
    (customize-set-variable 'load-prefer-newer nil)
  #+end_src

- ~executable-make-buffer-file-executable-if-script-p~

  When saving a file that starts with the shebang (=#!=), make that file
  executable.

  To change this, add the following code to your config:

  #+begin_src emacs-lisp
    (remove-hook 'after-save-hook
                 'executable-make-buffer-file-executable-if-script-p)
  #+end_src

- ~repeat-mode~

  If available (beginning with Emacs 28), turn on repeat mode to allow certain
  keys to repeat on the last keystroke.

  For example, =C-x [= to page backward, after pressing this keystroke once,
  pressing repeated =[= keys will continue paging backward.

  ~repeat-mode~ is exited with the normal =C-g=, by movement keys, typing, or
  pressing ESC three times.

  Note that in the case of ~undo~ (by default bound to =C-x u=), pressing =u=
  repeatedly will iterate further undos, but typing =C-x u= again will act as an
  undo of the undo, i.e. a redo, which is handy, but possibly unexpected.

  To change this, add the following code to your config:

  #+begin_src emacs-lisp
    (repeat-mode -1)
  #+end_src

** Acknowledgements

Some of the defaults in this module were inspired by the following articles:

- Charles Choi: [[http://yummymelon.com/devnull/surprise-and-emacs-defaults.html][Surprise and Emacs Defaults]]
- Mickey Petersen: Mastering Emacs - [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying Emacs’s Window Manager]]  
