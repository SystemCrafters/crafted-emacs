This is rational-emacs.info, produced by makeinfo version 6.8 from
rational-emacs.texi.

Copyright © 2022 System Crafters Community

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Rational Emacs: (rational-emacs). A sensible starting point for hacking your own Emacs configuration.
END-INFO-DIR-ENTRY


File: rational-emacs.info,  Node: Top,  Next: Principles,  Up: (dir)

Rational Emacs
**************

Hacking one’s Emacs configuration is, for some, an ongoing endeavor.
For others, it just needs to work.  Other configuration packages attempt
to be a complete, canned, working configuration, while Rational attempts
to provide the bare minimum to get you started.  More like a framework
than a complete solution, Rational Emacs intends to provide a sensible
place to start configuring your Emacs to your needs.

   Defaults provided here were provided by a community of volunteers and
ideally represent sane defaults from which to start.  We expect you to
have different opinions than ours and we expect you to implement those
differences in your own configuration.  Our intent is to provide
something you might find useful to get your started on your own Emacs
configuration journey.

* Menu:

* Principles::
* Why use it?::
* Customization::
* Using it with Chemacs2::
* Contributing::
* Modules::
* MIT License::

— The Detailed Node Listing —

Customization

* How the rational config file is found::
* Example Configuration::
* The ‘custom.el’ file: The customel file.

The ‘custom.el’ file

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.
* Not loading the ‘custom.el’ file: Not loading the customel file.
* Caveat on the timing of loading ‘custom.el’: Caveat on the timing of loading customel.

Modules

* Rational Emacs Defaults Module::
* Rational Emacs Editing Module::



File: rational-emacs.info,  Node: Principles,  Next: Why use it?,  Prev: Top,  Up: Top

1 Principles
************

This configuration and all associated modules intend to follow these
principles:

   • Minimal, modular configuration

        • The core configuration only sets up Emacs to have a cleaner
          presentation with sensible defaults.  It is up to the user to
          decide which modules to load and when to load them.

        • Modules should not depend on other modules as much as
          possible.  When a module needs to integrate with other
          functionality in Emacs, the standard extensibility points of
          each package should be used.  The implication is someone
          should be able to copy code from a module into their own
          configuration _without_ using Rational Emacs.

   • Prioritize built-in Emacs functionality

     Where possible, we will leverage built-in Emacs functionality
     instead of external packages.

     Some of the packages we prefer:

        • ‘project.el’ for project management.

        • ‘tab-bar-mode’ for organizing groups of buffers.

        • ‘whitespace.el’ to cleanup whitespace, like tabs, newlines or
          additional space added to the end of lines.

        • ‘pulse.el’ to flash the current line under certain conditions.

        • And others...

     This is not to take away from the amazing work package providers
     have contributed to the Emacs community.  By prioritizing built-in
     features, we can highlight less known packages, have a more stable
     product, and reduce the amount of network load just to get started.
     Indeed, if you do not pull in any of the modules we provide, you
     may not even need a network (other than to clone the repo from
     GitHub).

   • Works well in the terminal

     Not everyone uses a windowing environment, and the terminal is
     popular for remote sessions as well as command line utilities.
     Working well in the terminal also enables the use of Emacs in
     Termux on Android!

   • Can be integrated with a Guix configuration

     GNU Guix is a functional package manager and GNU Linux
     distribution.  This integration enables setting things like font
     sizes, themes, etc in a system-specific and repeatable way.

   • Works well with ‘Chemacs2’

     Having multiple configurations available allows for testing
     individual package combinations or configurations from others.
     ‘Chemacs2’ allows for having multiple configurations simultaneously
     and Rational Emacs should work well in this environment also.

   • Helps you learn Emacs Lisp

     Instead of providing a higher-level configuration system out of the
     box like other Emacs configurations (like Doom or Spacemacs for
     example), we follow standard Emacs Lisp patterns so you can learn
     by reading the configuration.  This means we don’t provide macro
     wrappers around packaging and configuration tools.  No complex
     framework exists.


File: rational-emacs.info,  Node: Why use it?,  Next: Customization,  Prev: Principles,  Up: Top

2 Why use it?
*************

Why choose this configuration over _Doom Emacs_, _Spacemacs_, _Prelude_,
or others?

   The goal of this configuration is to make it easier to write your own
Emacs configuration while using pre-made configuration parts maintained
by the community.  Instead of using a monolithic, all-encompassing
approach, we strive to ensure that all parts of this configuration are
optional or interchangeable.

   You should even be able to use the configuration modules we provide
with your own ‘init.el’ file without using this base configuration repo!


File: rational-emacs.info,  Node: Customization,  Next: Using it with Chemacs2,  Prev: Why use it?,  Up: Top

3 Customization
***************

To add your own customization to this configuration, create a
configuration file in one of the following places:

   • ‘~/.rational-emacs/’
   • ‘~/.config/rational-emacs/’

   In your configuration you can set any Emacs configuration variable,
face attributes, themes, etc as you normally would.

   If you prefer to explicitly control where your ‘config.el’ and
‘early-config.el’ are found for Rational Emacs, you may provide a value
for the ‘RATIONAL_EMACS_HOME’ environment variable, either on the
command line or in your shell configuration.  This variable should only
contain the path to the ‘config.el’ files, for example:

     RATIONAL_EMACS_HOME=~/my-rational-emacs-config


Listing 3.1: Set environment variable ‘RATIONAL_EMACS_HOME’ to the path
of the configuration directory.

* Menu:

* How the rational config file is found::
* Example Configuration::
* The ‘custom.el’ file: The customel file.


File: rational-emacs.info,  Node: How the rational config file is found,  Next: Example Configuration,  Up: Customization

3.1 How the rational config file is found
=========================================

The rational config files (‘config.el’ and ‘early-config.el’) are found
in the ‘rational-config-path’.  That path will match exactly one of the
following scenarios, in the order specified:

   • Using ‘Chemacs2’ (See below for more on this)
        • The environment variable ‘RATIONAL_EMACS_HOME’ is used if
          provided in the profile definition.
        • The profile directory is used when no environment variable is
          provided in the profile definition.
   • Use the value found in the ‘RATIONAL_EMACS_HOME’ environment
     variable.
   • The environment variable ‘XDG_CONFIG_HOME’ is present or the path
     ‘$HOME/.config/rational-emacs’ exists.
        • These normally resolve to the same file, so build the path
          from the ‘XDG_CONFIG_HOME’ environment variable or the
          explicit path ‘~/.config/rational-emacs’
   • Use the ‘HOME’ environment variable to make the path, which expands
     to ‘$HOME/.rational-emacs’.

   Once the ‘rational-config-path’ is determined, if it does not exist
in the file system, it is created.  However, just the path is created,
the files ‘config.el’ and ‘early-config.el’ must be created by you.


File: rational-emacs.info,  Node: Example Configuration,  Next: The customel file,  Prev: How the rational config file is found,  Up: Customization

3.2 Example Configuration:
==========================


     (require 'rational-defaults)
     (require 'rational-screencast)
     (require 'rational-ui)
     (require 'rational-editing)
     (require 'rational-evil)
     (require 'rational-completion)
     (require 'rational-windows)

     ;; Set further font and theme customizations
     (custom-set-variables
      '(rational-ui-default-font
        '(:font "JetBrains Mono" :weight light :height 185)))

     (rational-package-install-package 'doom-themes)
     (load-theme 'doom-one t)



Listing 3.2: Example of user created Rational Emacs ‘config.el’ file.


File: rational-emacs.info,  Node: The customel file,  Prev: Example Configuration,  Up: Customization

3.3 The ‘custom.el’ file
========================

The ‘custom.el’ file will hold the auto-generated code from the Emacs
Customization UI.

* Menu:

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.
* Not loading the ‘custom.el’ file: Not loading the customel file.
* Caveat on the timing of loading ‘custom.el’: Caveat on the timing of loading customel.


File: rational-emacs.info,  Node: Simplified overview of how Emacs Customization works,  Next: Loading the customel file,  Up: The customel file

3.3.1 Simplified overview of how Emacs Customization works
----------------------------------------------------------

Customizable values are defined with the ‘defcustom’ form, and can be
customized using the Easy Customization UI.  A complete discussion is
out of scope for this document, instead see the Emacs Manual for more
information.

   There are several states a value can be in, for our purposes, we will
only consider two of them: the default state and the changed state.
These are not the "official" names but easily convey the concepts of the
variable.  If a value is in the default state, looking in the
Customization UI, the state will be listed as ‘STANDARD’.  Rational
Emacs takes the approach of using the ‘customize-set-variable’ to update
the values defined with ‘defcustom’.  This will show the values as ‘SET
for current session only’ in the Customization UI.  This is normal since
the values are set each time Emacs starts.  They are technically "SAVED"
since they exist as emacs-lisp code, but since they are not in a
‘custom-set-variables’ form the Customization UI only sees them as "SET
for the current session only".

   A ‘SAVED and set’ value means the Customization code has written the
configuration to disk to be loaded again the next time Emacs starts.
When Emacs saves the configuration from the Customization UI, it simply
adds a couple of forms to the end of your initialization file (typically
‘init.el’), with comments warning about having more than one form with
the same name (see example below).


File: rational-emacs.info,  Node: Loading the customel file,  Next: Not loading the customel file,  Prev: Simplified overview of how Emacs Customization works,  Up: The customel file

3.3.2 Loading the ‘custom.el’ file
----------------------------------

This is important because if you, the user, wish to use the
Customization UI to configure Emacs, the customizations will (by
default) be written to the bottom of the ‘init.el’ file in a form called
‘custom-set-variables’ and ‘custom-set-faces’.  These are loaded usually
at the end of the init cycle (which is why they are listed at the bottom
of the ‘init.el’ file) and allows restoring values set by the
Customization UI rather than through code.

   This configuration sets the ‘custom-file’ to exist in the
‘rational-config-path’ (see above) as a file known as ‘custom.el’.  This
file is *not* automatically loaded by Rational Emacs configuration.  You
may, if you choose, load this file yourself with the following code in
your ‘config.el’ file.

     (load "custom")

   It is important to load this file last to make sure it overrides any
values previously set while Emacs was starting.

   If you are using something like the example provided above, you might
have something that looks more like this:

     (require 'rational-defaults)
     (require 'rational-screencast)
     (require 'rational-ui)
     (require 'rational-editing)
     (require 'rational-evil)
     (require 'rational-completion)
     (require 'rational-windows)

     (rational-package-install-package 'doom-themes)
     (load-theme 'doom-one t)

     (load "custom")
     ;;; example-config.el ends here


Listing 3.3: Example ‘config.el’ loading the ‘custom.el’ file.

   And then in ‘custom.el’ you would have something like the following
which is auto-generated by Emacs:

     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(rational-ui-default-font '(:font "JetBrains Mono" :weight light :height 185))
      '(rational-ui-display-line-numbers t))
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      )


Listing 3.4: Example auto-generated ‘custom.el’ file.


File: rational-emacs.info,  Node: Not loading the customel file,  Next: Caveat on the timing of loading customel,  Prev: Loading the customel file,  Up: The customel file

3.3.3 Not loading the ‘custom.el’ file
--------------------------------------

You may choose not to load the ‘custom.el’ file if you are writing your
own configuration with Emacs-Lisp.  Using ‘customize-set-variable’ has
the same effect as using the Customization UI, with the primary
difference, the customization is not written later as if you had used
the Customization UI.  If you choose to follow this pattern, you will
not need to load the ‘custom.el’ file ever.  Our example (see above)
could imply the use of the Customization UI, as our example uses the
‘custom-set-variables’ form to set a list of customizable values all at
once.  Here is the same example written differently.

     (require 'rational-defaults)
     (require 'rational-screencast)
     (require 'rational-ui)
     (require 'rational-editing)
     (require 'rational-evil)
     (require 'rational-completion)
     (require 'rational-windows)

     (customize-set-variable 'rational-ui-default-font
                             '(:font "JetBrains Mono" :weight light :height 185))
     (customize-set-variable 'rational-ui-display-line-numbers t)

     (rational-package-install-package 'doom-themes)
     (load-theme 'doom-one t)


Listing 3.5: Example ‘config.el’ setting customization variables
directly.


File: rational-emacs.info,  Node: Caveat on the timing of loading customel,  Prev: Not loading the customel file,  Up: The customel file

3.3.4 Caveat on the timing of loading ‘custom.el’
-------------------------------------------------

Even if you are using emacs-lisp to customize Emacs, you may still
choose to load the ‘custom.el’ file.  Keep in mind, if you use
‘customize-set-variable’ or ‘setq’ to set the value for a ‘defcustom’
option and then load the ‘custom.el’ file which might have the same
variable set with a different value, the last thing to set that value
wins.

   Here is an example, first a ‘config.el’ snippet:

     ;; ... some customization before
     (customize-set-variable 'display-line-numbers-type 'relative)
     ;; ... some more customization

     (load "custom")


Listing 3.6: ‘config.el’ snippet loading ‘custom.el’ last

   and the ‘custom.el’ snippet

     (custom-set-variables
      '(display-line-numbers-type t))


Listing 3.7: ‘custom.el’ snippet.

   The value of the ‘display-line-numbers-type’ will be ‘t’.  Since the
‘custom.el’ file is loaded last the first value of the
‘display-line-numbers-type’ is overwritten.  The fix is to make sure you
set the value only once in your configuration with either
‘customize-set-variable’ or with ‘custom-set-variables’ either in your
‘config.el’ or loaded from ‘custom.el’


File: rational-emacs.info,  Node: Using it with Chemacs2,  Next: Contributing,  Prev: Customization,  Up: Top

4 Using it with ‘Chemacs2’
**************************

If you have the ‘Chemacs2’ configuration cloned to ‘~/.emacs.d’ or
‘~/.config/emacs’, you can clone ‘rational-emacs’ anywhere you like and
add an entry to it in your ‘~/.emacs-profiles.el’ file:

   You can then put your ‘early-config.el’ and ‘config.el’ files in the
sub-folder ‘~/path/to/rational-emacs/rational-emacs’.  So, for example
if you installed Rational Emacs to ‘~/.rational-emacs’, then your
‘early-config.el’ and ‘config.el’ files would be in the path
‘~/.rational-emacs/rational-emacs’.  This is the default path, but you
can change the name to something else, see below for examples.


     (("rational" . ((user-emacs-directory . "~/path/to/rational-emacs"))))



Listing 4.1: Example of a ‘Chemacs2’ user profile file in
‘~/.emacs-profiles.el’.

   If you prefer to put your Rational Emacs customizations elsewhere
(for example in a folder called ‘config‘ or maybe ‘personal‘), you can
specify the ‘RATIONAL_EMACS_HOME’ environment variable, for example like
this:


     (("rational" . ((user-emacs-directory . "~/path/to/rational-emacs")
                     (env . (("RATIONAL_EMACS_HOME" . "~/path/to/rational-emacs/personal"))))))



Listing 4.2: User ‘Chemacs2’ profile file ‘~/.emacs-profiles.el’ with
environment variable.

   Or some place completely different:


     (("rational" . ((user-emacs-directory . "~/path/to/rational-emacs")
                     (env . (("RATIONAL_EMACS_HOME" . "~/rational-config/personal"))))))



Listing 4.3: User ‘Chemacs2’ profile file ‘~/.emacs-profiles.el’ with
Rational Emacs config files set to another path.

   Then launch it with ‘emacs --with-profile rational’!


File: rational-emacs.info,  Node: Contributing,  Next: Modules,  Prev: Using it with Chemacs2,  Up: Top

5 Contributing
**************

Follow the Elisp Style Guide
(https://github.com/bbatsov/emacs-lisp-style-guide) when submitting pull
requests.

   This is a community-run modular Emacs configuration, for which we
appreciate feedback in the form of issues and pull requests.  Feel free
to open an issue prior to opening a pull request if you’re not certain
your idea is in the spirit of the *note Principles::.

   If you enjoy crafting your computing experience, join the
SystemCrafters (https://systemcrafters.net/) community!


File: rational-emacs.info,  Node: Modules,  Next: MIT License,  Prev: Contributing,  Up: Top

6 Modules
*********

Rational Emacs includes a number of modules to further configure Emacs.
These are intended to be stand-alone in the sense that no module
requires the use of any other module.

   The modules are written to support various themes: mini-buffer
selection (completion), editing, ui, etc.  To use these modules, simply
‘require’ them in your ‘config.el’, or copy the relevant portions to
your ‘config.el’ and modify them to suit your needs.

   In most cases, you can ‘require’ the module, and then adjust the
configuration for specific parts by overriding the settings provided by
the module by additional code in your ‘config.el’.

   While the intent here is to document each module as completely as
reasonably possible, the best-practice is to simply read the code for
the module of interest to understand it best.

* Menu:

* Rational Emacs Defaults Module::
* Rational Emacs Editing Module::


File: rational-emacs.info,  Node: Rational Emacs Defaults Module,  Next: Rational Emacs Editing Module,  Up: Modules

6.1 Rational Emacs Defaults Module
==================================

To use this module, simply require it in your config.

     (require 'rational-defaults)

   • ‘global-auto-revert-non-file-buffers’ : ‘t’

     Automatically update buffers changed outside Emacs, or by other
     Emacs processes, for example, version control.  This affects
     buffers not backed by files.

     Change this setting either by finding it in the Customization UI or
     by adding this code to your ‘config.el’

          (customize-set-variable 'global-auto-revert-non-file-buffers nil)

   • ‘global-auto-revert-mode’

     Global minor mode to revert any buffer when it changes either on
     disk or via another process, for example, version control.

     Turn this off by adding this code to your ‘config.el’

          (global-auto-revert-mode -1)

   • ‘indent-tabs-mode’ : ‘nil’

     Only indent using spaces.

     Change this setting either by finding it in the Customization UI or
     by adding this code to your ‘config.el’

          (customize-set-variable 'indent-tabs-mode t)

   • ‘y-or-n-p’

     Use shorter query responses (’y’ or ’n’ instead of ’yes’ or ’no’).
     This is managed by Emacs advice functionality.  It can be reverted
     in your ‘config.el’ by adding the code:

          (advice-remove 'yes-or-no-p #'y-or-n-p)

     In Emacs versions beginning with 28, use the ‘use-short-answers’
     variable set to ‘t’ instead to accomplish the same thing.

   • ‘recentf-mode’

     This minor mode saves the files you visit as a recent file so you
     can load that file again quickly.  The command ‘recentf-open-files’
     will display a menu of files you opened recently so you can quickly
     open it again.  This mode is added to the ‘after-init-hook’ which
     runs when Emacs is starting but after the initialization files have
     completed running.

   • ‘recentf-save-file’ : ‘/path/to/rational-emacs/var/recentf’

     This is the file which will hold the list of recent files.  It is
     located in the ‘var’ folder where your Rational Emacs configuration
     files reside.  You can find that path by using the
     ‘describe-variable’ function, which is also bound to the ‘C-h v’
     keybinding, and then providing the variable name
     ‘rational-config-var-directory’.

     Change this setting either by finding it in the Customization UI or
     by adding this code to your ‘config.el’ (make sure to set the path
     correctly)

          (customize-set-variable 'recentf-save-file "/some/path/to/recentf")

   • ‘kill-do-not-save-duplicates’ : ‘t’

     The ‘kill-ring’ is where Emacs stores the strings to paste later.
     This variable prohibits Emacs from storing duplicates of strings
     which are already on the ‘kill-ring’

     Change this setting either by finding it in the Customization UI or
     by adding this code to your ‘config.el’

          (customize-set-variable 'kill-do-not-save-duplicates nil)

   • ‘auto-window-vscroll’ : ‘nil’

     This causes Emacs to not automatically adjust window-vscroll to
     view tall lines.

     Change this by adding this code to your ‘config.el’

          (setq auto-window-vscroll t)

   • ‘fast-but-imprecise-scrolling’ : ‘t’

     Improves scrolling speed by not rendering fontification updates
     unless the text would actually be visible in the buffer.  Applies
     when scrolling very fast.

     Change this setting either by finding it in the Customization UI or
     by adding this code to your ‘config.el’

          (customize-set-variable 'fast-but-imprecise-scrolling nil)

   • ‘scroll-conservatively’ : ‘101’

     Never recenter the point when it has scrolled off the screen,
     instead only scroll just enough to bring the point back into view.

     Change this value to less than 100 to cause the point to be
     recentered in certain cases instead of scrolling just into view.
     This value can be changed in the Customization UI or by adding this
     code to your ‘config.el’ where ‘nnn’ is some number of lines to
     scroll.

          (customize-set-variable 'scroll-conservatively nnn)

   • ‘scroll-margin’ : ‘0’

     The number of lines at the top or bottom of a window where
     scrolling starts.

     Change this value in the Customization UI or by adding this code to
     your ‘custom.el’ where ‘nn’ is some number of lines at the top or
     bottom of a buffer where scrolling should start (for example: 5)

          (customize-set-variable 'scroll-margin nn)

   • ‘scroll-preserve-screen-position’ : ‘t’

     Controls if scroll commands move point to keep its screen position
     unchanged.

     A value of t means point keeps its screen position if the scroll
     command moved it vertically out of the window, e.g.  when scrolling
     by full screens.

     Change this value in the Customization UI or by adding this code to
     ‘custom.el’

          (customize-set-variable 'scroll-preserve-screen-position nil)

   • ‘bidi-paragraph-direction’ : ‘left-to-right’

     Forces directionality of text paragraphs in the buffer.  Rational
     Emacs sets the defualt value as ‘left-to-right’, which means for
     buffers which don’t have their own value, this one will be used.
     You can change this through the Customization UI or by addding the
     following code in ‘config.el’

          (customize-set-variable 'bidi-paragraph-direction 'right-to-left)

   • ‘bidi-inhibit-bpa’ : ‘t’

     This setting will inhibit the Bidirectional Parentheses Algorithm,
     which makes redisplay faster.  You can change the value of this
     variable by adding this code to ‘custom.el’

          (setq bidi-inhibit-bpa nil)

   • ‘global-so-long-mode’

     Improves performance for files with excessively long lines.  This
     can minor mode can be turned off in ‘config.el’ by adding:

          (global-so-long-mode -1)

   • ‘executable-make-buffer-file-executable-if-script-p’

     This makes a shell script executable on save and is called after
     saving the file.  To remove this behavior add the following to
     ‘config.el’

          (remove-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

   • ‘savehist-mode’

     This minor mode saves minibuffer history in the ‘history’ file
     usually found in your Rational Emacs configuration ‘var’ folder.
     You can change where the file should live with the Customization UI
     or by adding the following to ‘config.el’

          (customize-set-variable 'savehist-file
                                  "/path/to/minibuffer/history/file")

     You can turn off this mode by adding this code to ‘config.el’

          (savehist-mode -1)


File: rational-emacs.info,  Node: Rational Emacs Editing Module,  Prev: Rational Emacs Defaults Module,  Up: Modules

6.2 Rational Emacs Editing Module
=================================

To use this module, simply require it in your config.

     (require 'rational-editing)

   • Whitespace

     Keeping a file reasonably clean of dangling or other useless
     whitespace is the focus of the next bit of configuration.

     See *note the Emacs manual: (emacs)Useless Whitespace. for more
     information.

   • ‘whitespace-style’ : ‘(face tabs empty trailing tab-mark
     indentation::space)’

     This configures the types of whitespace to visualize and cleanup,
     there are several options:

        • ‘face’: enable all visualization via faces (see below).

        • ‘tabs’: TABs are visualized via faces.  It has effect only if
          face (see above) is present in whitespace-style.

        • ‘empty’: empty lines at beginning and/or end of buffer are
          visualized via faces.  It has effect only if face (see above)
          is present in whitespace-style.

        • ‘trailing’: trailing blanks are visualized via faces.  It has
          effect only if face (see above) is present in
          whitespace-style.

        • ‘tab-mark’: TABs are visualized via display table

        • ‘indentation::space’: TABs at beginning of line are visualized
          via faces.  It has effect only if face (see above) is present
          in whitespace-style.

     See the commentary for this variable (‘C-h v whitespace-style RET’)
     for more options.  This variable can be changed through the
     Customization UI or by adding to ‘config.el’

          ;; change the list of options to be what you wish based on the values
          ;; mentioned in the commentary for this variable
          ;; (C-h v whitespace-style RET)
          (customize-set-variable 'whitespace-style
                                  '(face tabs empty trailing tab-mark
                                         indentation::space))

   • ‘whitespace-action’ : ‘(cleanup auto-cleanup)’

     This specifies what action to take when a buffer is visited or
     written.

        • ‘cleanup’: cleanup any bogus whitespace always when local
          whitespace is turned on.  See whitespace-cleanup and
          whitespace-cleanup-region.

        • ‘auto-cleanup’: cleanup any bogus whitespace when buffer is
          written.  See whitespace-cleanup and
          whitespace-cleanup-region.

     See the commentary for this variable (‘C-h v whitespace-action
     RET’) for more options.  This variable can be changed through the
     Customization UI or by adding to ‘config.el’

          ;; change the list of options to be what you wish based on the values
          ;; mentioned in the commentary for this variable
          ;; (C-h v whitespace-action RET)
          (customize-set-variable 'whitespace-action '(cleanup auto-cleanup))

   • ‘whitespace-mode’

     This minor mode is added to ‘prog-mode’ and ‘text-mode’ via hooks.
     To change this, add code similar to the following to ‘config.el’

          (remove-hook 'prog-mode-hook #'whitespace-mode)

   • ‘electric-pair-mode’

     This minor mode will automatically insert balanced characters when
     the opening character is inserted.  This applies to

        • ‘()’
        • ‘{}’
        • ‘[]’
        • ‘""’
        • ‘<>’

     This can be turned off by adding this code to ‘config.el’

          (electric-pair-mode -1)

     Alternatively, if this should only apply to certain modes,
     programming language modes for example, this code would be used:

          (electric-pair-mode -1)                         ; turn off globally

          (add-hook 'prog-mode-hook #'electric-pair-mode) ; turn on only for
                                                          ; programming modes

   • ‘show-paren-mode’

     This minor mode highlights matching parens ‘()’, including braces
     ‘{}’, square brackets ‘[]’, and angle brackets ‘<>’.

     This can be turned off by adding this code to ‘config.el’

          (show-paren-mode -1)

     Alternatively, if this should only apply to certain modes,
     programming language modes for example, this code would be used:

          (show-paren-mode -1)                         ; turn off globally

          (add-hook 'prog-mode-hook #'show-paren-mode) ; turn on only for
                                                       ; programming modes


File: rational-emacs.info,  Node: MIT License,  Prev: Modules,  Up: Top

Appendix A MIT License
**********************

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.



Tag Table:
Node: Top1412
Node: Principles2990
Node: Why use it?6057
Node: Customization6733
Ref: org11ad4407537
Node: How the rational config file is found7825
Node: Example Configuration9281
Ref: orgb86d75e9487
Node: The customel file10000
Node: Simplified overview of how Emacs Customization works10547
Node: Loading the customel file12267
Ref: configel13571
Ref: customel14075
Node: Not loading the customel file14807
Ref: orgf0a0b2a15691
Node: Caveat on the timing of loading customel16238
Ref: configel (1)16905
Ref: customel (1)17173
Node: Using it with Chemacs217680
Ref: orgf4b356418501
Ref: orga10fd1f18904
Ref: orgbf447ba19218
Node: Contributing19573
Node: Modules20211
Node: Rational Emacs Defaults Module21242
Node: Rational Emacs Editing Module28349
Node: MIT License33008

End Tag Table


Local Variables:
coding: utf-8
End:
