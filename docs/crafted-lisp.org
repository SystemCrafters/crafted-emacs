* Crafted Emacs Lisp Module

  This module installs and configures a few additonal packages to
  provide a configuration for the Lisp family of languages including
  Common Lisp, Clojure, Scheme, and Racket.

  - Prerequisites:

    Obviously, an implementation of one of the languages mentioned
    above would need to be installed. Examples would be (a
    non-exhaustive list):

    + Common Lisp:
      * CLISP (GNU Common Lisp) [[https://clisp.sourceforge.io]]

        GNU's implementation, cross platform, a good choice for people
        who need to target Microsoft Windows, Mac OS, and/or Linux.

      * CMUCL (Carnegie-Mellon Common Lisp) [[https://cmucl.org]]

        An implementation from Carnegie-Mellon university. Known to be
        fairly fast with a native compiler. Runs on most Unix
        platforms.

      * SBCL (Steel-Bank Common Lisp) [[http://sbcl.org]]

        A fork of CMUCL and ostensibly the most popular
        implementation, though there aren't many user visible
        differences between SBCL and CMUCL.

    + Clojure [[https://clojure.org]]

    + Scheme:
      * GNU Guile [[https://www.gnu.org/software/guile]]

        The GNU Ubiquitious Intelligent Language for Extensions, can
        be combined with C/C++ programs as an extension language or
        can be used stand-alone and features a compiler and vitual
        machine. Popularly used with the GNU Guix package manager used
        natively by the GNU Guix Linux distribution, although it can
        be used with other Linux distributions as well.

      * Chez [[https://cisco.github.io/ChezScheme]]

        Known to be extremely fast, with a native compiler providing
        binaries on par with compiled C code.

      * Gauche [[https://practical-scheme.net/gauche]]

        Built to start start nearly instantly, targeted as a shell
        scripting tool.

    + Racket [[https://racket-lang.org]]

      Promoted as a language for language developers, is cross
      platform with a few pedagogical books to help beginners learn to
      write software, as well as many advanced features.

** Packages Installed

   - Common
     + =aggressive-indent=
   - Common Lisp
     + =sly=
     + =sly-asdf=
     + =sly-quicklisp=
     + =sly-repl-ansi-color=
   - Clojure
     + =cider=
     + =clj-refactor=
     + =clojure-mode=
     + =flycheck-clojure=
   - Scheme/Racket
     + =geiser=
     + =geiser-guile=
     + =geiser-racket=

** Common

   Aggressive indent mode is added to each of the other lisp family
   configurations. It provides automatic indentation, even when
   pasting code or adding structure. It is added on each mode hook, to
   turn this feature off, remove the hook. For example:

   #+begin_src emacs-lisp
     (remove-hook 'lisp-mode-hook #'aggressive-indent-mode)
   #+end_src

   - Hooks =aggressive-mode= is added to:
     - =lisp-mode-hook=
     - =scheme-mode-hook=
     - =clojure-mode-hook=

** Common Lisp

   The configuration for Common Lisp features Sylvester the cat's
   Common Lisp IDE for Emacs. It provides a debugger, inspector, xref,
   completion, integration with ASDF and Quicklsp system definition
   tools.

** Clojure

   The configuration for Clojure is based on CIDER and adds
   =clj-refactor= a refactoring layer built on top of CIDER. The
   refactoring keybinding prefix is set to =C-c r= to avoid conflicts
   with CIDER. To change this to something else (for example =C-c C-m=
   as mentioned on the github page) use the following snippet:

   #+begin_src emacs-lisp
     (cljr-add-keybindings-with-prefix "C-c C-m")
   #+end_src

** Scheme/Racket

   Geiser provides a modular package for the Scheme family of
   languages including Racket. There are several modules availble for
   Geiser. We provide the configuration for Guile and Racket, but
   others can be added, see the Commentary section for this module to
   see a list of other modules, or look for them by running
   =M-x list-packages= and seaching for =geiser=.

   When visiting a scheme file, use =M-x gieser-run= to start a
   REPL. Alternatively, you can use =M-x geiser-guile= or
   =M-x geiser-racket-connect=.

   If you have installed multiple scheme implementations, you may wish
   to set the =scheme-program-name= variable, which we default to
   "guile" to match the configuration for that implementation. To
   change this to =scheme= for example, use this snippet:

   #+begin_src emacs-lisp
     (customize-set-variable 'scheme-program-name "scheme")
   #+end_src
