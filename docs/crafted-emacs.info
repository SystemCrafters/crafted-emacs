This is crafted-emacs.info, produced by makeinfo version 7.0.3 from
crafted-emacs.texi.

Copyright © 2022 System Crafters Community

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Crafted Emacs: (crafted-emacs). A sensible starting point for hacking your own Emacs configuration.
END-INFO-DIR-ENTRY


File: crafted-emacs.info,  Node: Top,  Next: Goals,  Up: (dir)

Crafted Emacs
*************

Hacking one’s Emacs configuration is, for some, an ongoing endeavor.
For others, it just needs to work.  Other configuration packages attempt
to be a complete, canned, working configuration, while Crafted attempts
to provide the bare minimum to get you started.  More like a framework
than a complete solution, Crafted Emacs intends to provide a sensible
place to start configuring your Emacs to your needs.

   Defaults provided here were provided by a community of volunteers and
ideally represent sane defaults from which to start.  We expect you to
have different opinions than ours and we expect you to implement those
differences in your own configuration.  Our intent is to provide
something you might find useful to get you started on your own Emacs
configuration journey.

* Menu:

* Goals::
* Principles::
* Why use it?::
* Getting Started::
* Customization::
* Contributing::
* Modules::
* Troubleshooting::
* MIT License::

— The Detailed Node Listing —

Principles

* Minimal, modular configuration: Minimal modular configuration.
* Prioritize built-in Emacs functionality::
* Can be integrated with a Guix configuration::
* Helps you learn Emacs Lisp::
* Reversible::

Getting Started

* Starting from scratch::
* Starting from an existing configuration::

Starting from scratch

* Prerequisites::
* Early Emacs Initialization::
* Emacs Initialization::

Starting from an existing configuration

* Crafted Modules with use-package::
* Crafted modules with externally installed Emacs packages::

Customization

* Managing packages::
* Example Configuration::
* The ‘custom.el’ file: The customel file.

Managing packages

* Configuring a package manager::
* Installing packages::
* Using alternate package managers::

The ‘custom.el’ file

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.

Modules

* Crafted Emacs Org Module::

Crafted Emacs Org Module

* Installation::
* Description::
* Alternative package org-roam::

Troubleshooting

* A package (suddenly?) fails to work::



File: crafted-emacs.info,  Node: Goals,  Next: Principles,  Prev: Top,  Up: Top

1 Goals
*******

   • No new configuration system, macros, layers etc.  Almost everything
     is straight Emacs Lisp.
   • Provide some pre-configured modules to shorten the time it takes to
     build a nice working configuration.
   • Customizations in the modules we provide should be opt-in by
     default to avoid surprising behavior.
   • Not a turn-key/kitchen sink solution.  There will be holes the user
     must fill.
   • Fewer packages rather than more; we prefer to stay closer to
     built-in functionality as much as possible.
   • Correctness is important, as we expect people who might be new to
     Emacs Lisp to learn from what we have written.  We prefer
     ‘customize-set-variable’ instead of ‘setq’ for ‘defcustom’ values
     as an example.
   • Documentation is thorough, complete, and easy to find.  There is an
     *note info: (crafted-emacs)Top. manual for Crafted Emacs
     distributed with the source.


File: crafted-emacs.info,  Node: Principles,  Next: Why use it?,  Prev: Goals,  Up: Top

2 Principles
************

* Menu:

* Minimal, modular configuration: Minimal modular configuration.
* Prioritize built-in Emacs functionality::
* Can be integrated with a Guix configuration::
* Helps you learn Emacs Lisp::
* Reversible::


File: crafted-emacs.info,  Node: Minimal modular configuration,  Next: Prioritize built-in Emacs functionality,  Up: Principles

2.1 Minimal, modular configuration
==================================

The core configuration only sets up Emacs to have a cleaner presentation
with sensible defaults.  It is up to the user to decide which
‘crafted-*’ modules to load.

   Configuration modules depend on other modules and the base
configuration as little as possible.

   The implication is that someone should be able to install or copy
code from a ‘crafted-*’ module into their own configuration _without_
using Crafted Emacs.


File: crafted-emacs.info,  Node: Prioritize built-in Emacs functionality,  Next: Can be integrated with a Guix configuration,  Prev: Minimal modular configuration,  Up: Principles

2.2 Prioritize built-in Emacs functionality
===========================================

Where possible, we leverage built-in Emacs functionality instead of
external packages.  When we choose external packages, we prefer those
which are layered on top of existing, built-in, functionality.  For
example:

   • ‘project.el’ instead of ‘Projectile’
   • ‘tab-bar-mode’ instead of ‘Perspective.el’, ‘persp-mode’,
     ‘eyebrowse’, etc
   • ‘eglot’ instead of ‘lsp-mode’ (because ‘eglot’ prioritizes built-in
     functionality in Emacs 28, and is built-in with Emacs 29)


File: crafted-emacs.info,  Node: Can be integrated with a Guix configuration,  Next: Helps you learn Emacs Lisp,  Prev: Prioritize built-in Emacs functionality,  Up: Principles

2.3 Can be integrated with a Guix configuration
===============================================

It should be possible to customize aspects of the Crafted Emacs
configuration inside of a Guix Home configuration so that things like
font sizes, themes, etc can be system-specific.

   It can also use packages installed via the Guix package manager
instead of ‘package.el’.


File: crafted-emacs.info,  Node: Helps you learn Emacs Lisp,  Next: Reversible,  Prev: Can be integrated with a Guix configuration,  Up: Principles

2.4 Helps you learn Emacs Lisp
==============================

Instead of providing a higher-level configuration system out of the box
like other Emacs configurations, we follow standard Emacs Lisp patterns
so that you can learn by reading the configuration.  We do our best to
provide clear comments where necessary to help the reader understand our
choices and how the code works.


File: crafted-emacs.info,  Node: Reversible,  Prev: Helps you learn Emacs Lisp,  Up: Principles

2.5 Reversible
==============

We recognize not everyone will agree with our decisions, so each
customization should be easily reversible in the users configuration
file.


File: crafted-emacs.info,  Node: Why use it?,  Next: Getting Started,  Prev: Principles,  Up: Top

3 Why use it?
*************

Why choose this configuration over _Doom Emacs_, _Spacemacs_, _Prelude_,
or others?

   The goal of this configuration is to make it easier to write your own
Emacs configuration while using pre-made configuration parts maintained
by the community.  Instead of using a monolithic, all-encompassing
approach, we strive to ensure that all parts of this configuration are
optional or interchangeable.

   You should even be able to use the configuration modules we provide
with your own ‘init.el’ file without using this base configuration repo!


File: crafted-emacs.info,  Node: Getting Started,  Next: Customization,  Prev: Why use it?,  Up: Top

4 Getting Started
*****************

* Menu:

* Starting from scratch::
* Starting from an existing configuration::


File: crafted-emacs.info,  Node: Starting from scratch,  Next: Starting from an existing configuration,  Up: Getting Started

4.1 Starting from scratch
=========================

The person who is starting from scratch is likely in one of the
following categories:

   • New to Emacs.
   • Not new to Emacs, but coming from another starter kit
   • Not new to Emacs, but choosing to throw away whatever configuration
     they have and start over from scratch - also known as _"Emacs
     configuration bankruptcy"_

   Each category has different concerns, but we’ll approach this from
the perspective of the brand new Emacs user.  If you are more familiar
with Emacs, you’ll be able to skim this section for the code examples
and move from there.

* Menu:

* Prerequisites::
* Early Emacs Initialization::
* Emacs Initialization::


File: crafted-emacs.info,  Node: Prerequisites,  Next: Early Emacs Initialization,  Up: Starting from scratch

4.1.1 Prerequisites
-------------------

First, we need to make sure we are starting with a clean slate.  If you
are starting from scratch, but have started Emacs and tried changing any
of the configuration options, you have that laying about which can
confuse things.  If the following exist, you must decide if you wish to
remove them or rename them to something else.

   • In your home folder, the file ‘.emacs’ or ‘_emacs’.
   • In your home folder, the directory ‘.emacs.d’ or ‘_emacs.d’.
   • In your home folder, the directory ‘.config/emacs’

   You’ll also need to clone this project somewhere, the easiest is in
your home folder.

     git clone https://github.com/SystemCrafters/crafted-emacs

     # N.B. As this is still a beta release, make sure to also execute the following command:

     git checkout craftedv2beta

   For the rest of this document, the location where you checked out
Crafted Emacs will be known as ‘crafted-emacs-home’.


File: crafted-emacs.info,  Node: Early Emacs Initialization,  Next: Emacs Initialization,  Prev: Prerequisites,  Up: Starting from scratch

4.1.2 Early Emacs Initialization
--------------------------------

The Emacs startup process has several steps, more than what will be
discussed here.  We will briefly cover the ‘early-init.el’ file which
Emacs allows user to affect some configuration options which occur
before Emacs draws the initial frame (often known as the "window" in a
graphical windowing system).  For more information about this file, see
the entry in the Emacs info system: *note Early Init File: (emacs)Early
Init File, or on the web: Early Init File
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html).

   Emacs looks for initialization files in several defined places.  For
our purposes, we will be using the directory ‘.emacs.d’ in your home
folder.  If you removed this directory in the last step, we now need to
create that directory so we can put our initialization files there.  If
you are using a Linux or MacOS system and prefer to follow the
Freedesktop guidelines, then create the path ‘.config/emacs/’ instead.

   If you are on a recent version of Microsoft Windows, either location
will work.  Sometimes you need to look in the
‘%USERPROFILE%/AppData/Roaming’ folder to find either the ‘.emacs.d’ or
‘.config/emacs’ folder.  In some cases ‘%HOME%’ will point to
‘%USERPROFILE%/AppData/Roaming’ already.  Older versions of Microsoft
Windows may refer to ‘_emacs.d’ instead.

   From now on, we will call this the ‘user-emacs-directory’, and all of
our work will be in that folder.

   For our purposes, this is where we initialize the package system.
These steps are optional.  In the ‘user-emacs-directory’:

  1. Create a file called ‘early-init.el’
  2. Add this single line of code (which assumes the
     ‘crafted-emacs-home’ is the ‘crafted-emacs’ directory found in your
     home folder):

          (load "~/crafted-emacs/modules/crafted-early-init-config")

   For more detail on how the package system is configured for _Crafted
Emacs_, see the info page: *note Configuring a package manager:
(crafted-emacs.info)Configuring a package manager. or, if you are
reading this locally, see: crafted-package.org (crafted-package.org)


File: crafted-emacs.info,  Node: Emacs Initialization,  Prev: Early Emacs Initialization,  Up: Starting from scratch

4.1.3 Emacs Initialization
--------------------------

The ‘init.el’ file is where most of the work of configuring Emacs will
occur.  Let’s start by creating the ‘init.el’ file in your
‘user-emacs-directory’ and add this code:

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

   Emacs customization is largely a matter of setting the values of
certain variables.  The Emacs customization system will store these in
the file known as the ‘custom-file’ which defaults to your
initialization file, in this case called ‘init.el’.  We’d rather keep
that separate from what we are doing in the ‘init.el’ file as that code
is auto-generated by Emacs.  In a sense, it is a duplication of the work
we will be doing as the values we set programmatically will also be
stored in this file and loaded by the code in lines 2-4 above.  Line six
adds the ‘modules’ folder from the ‘crafted-emacs-home’ directory to the
Emacs ‘load-path’ variable so Emacs knows where to look to get the
customizations we will apply going forward.

  1. Basic Configuration

     At this point, Emacs is still in it’s mostly "out of the box"
     state.  Some people will prefer to stop at this point, but most
     will prefer to continue to customize their configuration.  To move
     to the next step, add the following to the bottom of your
     initialization file:

          (require 'crafted-defaults-config)

     This will turn on and configure the following features in Emacs:

        • Auto revert mode - this will keep your buffers up-to-date if
          they are changed outside of Emacs.
        • Delete selection mode - most people expect to delete or
          replace text they have highlighted, this turns on that
          behavior.
        • Using tabs is turned off - this makes using spaces the default
          method of indentation and helps when sharing files with
          others.
        • Recent files mode - this keeps track of the files you have
          opened recently so you can open them again more quickly next
          time.  A menu option is added to the file menu so you can find
          the list of files you recently opened.
        • Scrolling is enhanced to make it less stuttered.
        • Long lines are handled more gracefully.
        • Shell scripts are made to be executable on save automatically.
        • Window navigation keybindings are set, and undo/redo for
          window layouts is turned on so once you have your windows laid
          out to your liking, if something changes the layout, you can
          undo those changes and get your window layout back.
        • The built in completion is configured to launch on the TAB
          key.  This includes vertical completions are turned on in the
          minibuffer (that area below the modeline at the bottom of the
          frame).
        • Certain windows, like the Help, Completions and Dictionary
          windows are configured for buffer reuse, window height and
          location.
        • Using dictionary to look up words is bound to a key, and the
          spell checker is turned on (if you have ‘ispell’ or ‘aspell’
          installed)

     We believe this is a nicely configured base Emacs.  No packages
     need to be installed for this configuration, but adding a few can
     further enhance your Emacs experience.  We’ll talk more about that
     later in this guide.  For now, congratulations!  You have a nicely
     configured and usable Emacs.

     If you are very new to Emacs, you might take a moment here to go
     read through Mickey Petersen’s "Mastering Emacs" book.  You can get
     a copy from here (https://masteringemacs.org/r/systemcrafters).


File: crafted-emacs.info,  Node: Starting from an existing configuration,  Prev: Starting from scratch,  Up: Getting Started

4.2 Starting from an existing configuration
===========================================

If you aren’t starting from scratch, then you probably have some
configuration already working and you want to add or use some of the
configuration found in Crafted Emacs.

   To start, clone this repository.  Going forward, we will assume you
did this in your home folder and will refer to this as
‘crafted-emacs-home’.

   After cloning the Crafted Emacs repo, to use the modules, you need to
add the following to your configuration:

     ;; This assumes you cloned Crafted Emacs in you home directory, if you
     ;; didn't, make sure to update the path to correctly reflect the
     ;; location on your system.
     (load "~/crafted-emacs/modules/crafted-init-config")

   This adds the ‘crafted-emacs/modules’ folder to the ‘load-path’.  If
you need to have packages installed, look for modules ending with
‘*-packages.el’, if you only want the configuration, then the modules
ending with ‘*-config.el’ will be what you want.

   In this example, we setup the ‘custom-file’, which is used by Emacs
to store configuration settings as well as to remember.  Next we load
the ‘crafted-init-config’ file to setup the ‘load-path’.  Finally, we
add the completions packages and configuration modules.

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")
     (require 'crafted-completion-packages)  ; must come first to install
                                             ; the packages

     (package-install-selected-packages :noconfirm) ; install the packages
                                                    ; from the bundle
                                                    ; mentioned above.

     (require 'crafted-completion-config)

* Menu:

* Crafted Modules with use-package::
* Crafted modules with externally installed Emacs packages::


File: crafted-emacs.info,  Node: Crafted Modules with use-package,  Next: Crafted modules with externally installed Emacs packages,  Up: Starting from an existing configuration

4.2.1 Crafted Modules with ‘use-package’
----------------------------------------

Some people prefer to use the very popular (and built-in to Emacs 29)
‘use-package’ configuration tool.  Here is an example similar to the
previous one.

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     ;; must come first to install the packages
     (require 'crafted-completion-packages)
     (package-install-selected-packages :noconfirm)

     ;; configure vertico
     (use-package 'vertico
       :init
       (require 'vertico-directory)
       :config
       (customize-set-variable 'vertico-cycle t)
       (vertico-mode 1))

     ;; more configuration for completion packages would go here


File: crafted-emacs.info,  Node: Crafted modules with externally installed Emacs packages,  Prev: Crafted Modules with use-package,  Up: Starting from an existing configuration

4.2.2 Crafted modules with externally installed Emacs packages
--------------------------------------------------------------

Here, we assume you use ‘guix-home’, ‘NixOS Home Manager’ or other
similar tool to install Emacs packages from your operating system
software library.  We continue with another iteration on the previous
example, in this case we will assume something like the following
‘guix-home’ configuration:

     (home-environment
      (packages (specifications->packages
                 (list
                  "emacs"
                  "emacs-vertico"
                  "emacs-corfu"
                  ;; other emacs packages
                  )))

   Then, in the ‘init.el’ file, the following snippet can be used to
configure the packages installed above:

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     ;; since the packages are already installed, we only need to use the
     ;; config module to configure them.
     (require 'crafted-completion-config)


File: crafted-emacs.info,  Node: Customization,  Next: Contributing,  Prev: Getting Started,  Up: Top

5 Customization
***************

* Menu:

* Managing packages::
* Example Configuration::
* The ‘custom.el’ file: The customel file.


File: crafted-emacs.info,  Node: Managing packages,  Next: Example Configuration,  Up: Customization

5.1 Managing packages
=====================

* Menu:

* Configuring a package manager::
* Installing packages::
* Using alternate package managers::


File: crafted-emacs.info,  Node: Configuring a package manager,  Next: Installing packages,  Up: Managing packages

5.1.1 Configuring a package manager
-----------------------------------

The default package manager in _Crafted Emacs_ is the built-in
‘package.el’.  Other package managers can be used with _Crafted Emacs_,
their configuration is up to the user.

   The general process for using a package manager in Emacs is to
provide the configuration in the ‘early-init.el’ file.  This file is
used specifically to allow the user to configure various parts of Emacs
very early in the startup process.

   To configure ‘package.el’, add the following to your ‘early-init.el’
file.

     ;; This assumes you have cloned the Crafted Emacs project in the
     ;; `crafted-emacs' directory in your home folder.  Change the path
     ;; appropriately for your system.
     (load "~/crafted-emacs/modules/crafted-early-init-config")

   This code will do the following:

   • Setup the ‘package-archives’ list to include the following list of
     package repositories:
       1. *GNU Elpa* - contains packages which use the GNU GPL (GNU
          General Public License) for their license and for which the
          author has signed the copyright release to the Free Software
          Foundation.  Maintenance is by the GNU Emacs maintainers.
       2. *Non-GNU Elpa* - contains packages which may or may not use
          the GNU GPL for their license, but which the authors have not
          signed copyright release to the Free Software Foundation,
          however authors must follow a list of rules for package
          submission.  The decision to include a package is left to the
          discretion of the GNU Emacs maintainers.
       3. *MELPA Stable* - MELPA packages which have a version tag in
          their ‘git’ repository, these are pulled and built on a
          regular basis as needed when the tag version changes.
       4. *MELPA* - hosts prebuilt development packages based on the
          latest commit in the respective ‘git’ repository.  These will
          have version numbers similar to this: ‘20210701.839’ which is
          essentially a date stamp when the package was built.
   • Prioritize the list of package repositories to be in the order
     listed above.  This means, we prefer to get packages from GNU Elpa
     first, if not found, then try the next repository down the list,
     finally trying to get the package from MELPA as a last resort.
     This is because _Crafted Emacs_ prefers released versions, if
     available, for all packages installed.
   • Check to make sure the repository cache archives are up-to-date,
     and update if needed.  This check is performed when Emacs is
     starting, and will check to see if the repository cache is older
     than one day.  To check less frequently, set the variable
     ‘crafted-package-update-days’ to a higher value.  To not perform
     the check at all, set the
     ‘crafted-package-perform-stale-archive-check’ variable to ‘nil’.

     Once _Crafted Emacs_ is up and running, no stale checks are made.
     Thus, if you run _Crafted Emacs_ for several days without
     restarting Emacs, you’ll need to refresh the package repository
     archive caches manually.  This is done automatically when running
     ‘package-list-packages’.


File: crafted-emacs.info,  Node: Installing packages,  Next: Using alternate package managers,  Prev: Configuring a package manager,  Up: Managing packages

5.1.2 Installing packages
-------------------------

The standard approach to finding and installing packages is to use the
following command ‘M-x list-packages RET’, which will bring up a user
interface to search for packages, review the package details, install,
update or remove package.  For more information, see the *note Emacs
Packages Info page: (emacs)Packages.

   Additionally, _Crafted Emacs_ provides a few modules which bundle
together packages for installation.  Each of these modules simply adds
one or more package names to the ‘package-selected-packages’ list, for
example:

     ;; not all package names are shown here, the list is shortened for
     ;; brevity.
     (add-to-list 'package-selected-packages 'cape)
     (add-to-list 'package-selected-packages 'consult)
     (add-to-list 'package-selected-packages 'corfu)

   To use these modules, simply add a ‘require’ in your ‘init.el’ file.
For example, to get the list above, you would add the following:

     ;; Currently there are nine modules which provide packages, this is
     ;; just one of them.
     (require 'crafted-completion-packages)

   somewhere near the top.  After this line, you then install the
packages with the following:

     ;; adding the `:noconfirm' flag will cause all the packages listed in
     ;; the `package-selected-packages' variable to be installed without
     ;; prompting you to confirm that choice.
     (package-install-selected-packages :noconfirm)


File: crafted-emacs.info,  Node: Using alternate package managers,  Prev: Installing packages,  Up: Managing packages

5.1.3 Using alternate package managers
--------------------------------------

Not everyone will prefer to use Emacs’ built-in package manager,
‘package.el’.  Using the package bundle modules from _Crafted Emacs_ is
still possible, however, you will potentially need to iterate over the
‘package-selected-packages’ list to perform the install for your package
manager.  To help with that, the ‘crafted-package-config’ module
provides a variable to set and a function to call.

   Here is an example using ‘straight-use-package’ as the tool to
install packages:

     (setq crafted-package-installer #'straight-use-package)
     (setq crafted-package-installed-predicate #'straight--installed-p)
     (crafted-package-install-package-list)

   Note: This usage is simple in the sense full recipes are not used
when using _Crafted Emacs_ package bundle modules.  The above
essentially runs code like the following:

     (straight-use-package 'corfu)

   It is not required to use the _Crafted Emacs_ package bundle modules,
you are free to install packages in whatever manner you choose, for
example, using ‘guix-home’ to install Emacs packages from the Guix
Store.  Similarly, using ‘straight’, ‘elpaca’, ‘package-vc’ or others
can be used to install any packages you choose.  Once your packages are
installed, you can then use the _Crafted Emacs_ configuration modules.
These modules have names like ‘crafted-completion-config.el’ for
example.  Add these to your ‘init.el’ *after* installing packages.


File: crafted-emacs.info,  Node: Example Configuration,  Next: The customel file,  Prev: Managing packages,  Up: Customization

5.2 Example Configuration:
==========================

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     (require 'crafted-completion-packages)
     (package-install-selected-packages :noconfirm)
     (require 'crafted-defaults-config)
     (require 'crafted-completion-config)


Listing 5.1: Example ‘init.el’

See the ‘examples’ folder in the git-repo for more examples.


File: crafted-emacs.info,  Node: The customel file,  Prev: Example Configuration,  Up: Customization

5.3 The ‘custom.el’ file
========================

The ‘custom.el’ file will hold the auto-generated code from the Emacs
Customization UI.

* Menu:

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.


File: crafted-emacs.info,  Node: Simplified overview of how Emacs Customization works,  Next: Loading the customel file,  Up: The customel file

5.3.1 Simplified overview of how Emacs Customization works
----------------------------------------------------------

Customizable values are defined with the ‘defcustom’ form, and can be
customized using the Easy Customization UI.  A complete discussion is
out of scope for this document, instead see the Emacs Manual for more
information.

   There are several states a value can be in, for our purposes, we will
only consider two of them: the default state and the changed state.
These are not the "official" names but easily convey the concepts of the
variable.  If a value is in the default state, looking in the
Customization UI, the state will be listed as ‘STANDARD’.  Crafted Emacs
takes the approach of using the ‘customize-set-variable’ to update the
values defined with ‘defcustom’.  This will show the values as ‘SET for
current session only’ in the Customization UI.  This is normal since the
values are set each time Emacs starts.  They are technically "SAVED"
since they exist as emacs-lisp code, but since they are not in a
‘custom-set-variables’ form the Customization UI only sees them as "SET
for the current session only".

   A ‘SAVED and set’ value means the Customization code has written the
configuration to disk to be loaded again the next time Emacs starts.
When Emacs saves the configuration from the Customization UI, it simply
adds a couple of forms to the end of your initialization file (typically
‘init.el’), with comments warning about having more than one form with
the same name (see example below).


File: crafted-emacs.info,  Node: Loading the customel file,  Prev: Simplified overview of how Emacs Customization works,  Up: The customel file

5.3.2 Loading the ‘custom.el’ file
----------------------------------

This is important because if you, the user, wish to use the
Customization UI to configure Emacs, the customizations will (by
default) be written to the of the ‘init.el’ file in a form called
‘custom-set-variables’ and ‘custom-set-faces’.

   This snippet, added to the top of your ‘init.el’ file sets the name
of the file holding Emacs customizations to be ‘custom.el’ in the same
directory where your ‘init.el’ file resides.  Additionally, the code
checks to see if the file exists, and if so, loads it to take advantage
of the saved configuration therein.

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

   This is an example of what the Emacs customization file might look
like.  The values used here are just examples, you may have many more
values configured than just these.

     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(column-number-mode t)
      '(fido-vertical-mode t))
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      )


Listing 5.2: Example auto-generated ‘custom.el’ file.


File: crafted-emacs.info,  Node: Contributing,  Next: Modules,  Prev: Customization,  Up: Top

6 Contributing
**************

Follow the Elisp Style Guide
(https://github.com/bbatsov/emacs-lisp-style-guide) when submitting pull
requests.

   This is a community-run modular Emacs configuration, for which we
appreciate feedback in the form of issues and pull requests.  Feel free
to open an issue prior to opening a pull request if you’re not certain
your idea is in the spirit of the *note Principles::.

   If you enjoy crafting your computing experience, join the
SystemCrafters (https://systemcrafters.net/) community!


File: crafted-emacs.info,  Node: Modules,  Next: Troubleshooting,  Prev: Contributing,  Up: Top

7 Modules
*********

Crafted Emacs includes a number of modules to further configure Emacs.
These are intended to be stand-alone in the sense that no module
requires the use of any other module.

   The modules are written to support various themes, for example
mini-buffer selection (completion), writing or ui.  For how to use them,
see the *note Getting Started:: section of the manual.

   While the intent here is to document each module as completely as
reasonably possible, the best-practice is to simply read the code for
the module of interest to understand it best.

   Module documentation may include additional information on related,
popular packages and a small example on how to extend your configuration
while using the same package installation methods as Crafted Emacs.

* Menu:

* Crafted Emacs Org Module::


File: crafted-emacs.info,  Node: Crafted Emacs Org Module,  Up: Modules

7.1 Crafted Emacs Org Module
============================

* Menu:

* Installation::
* Description::
* Alternative package org-roam::


File: crafted-emacs.info,  Node: Installation,  Next: Description,  Up: Crafted Emacs Org Module

7.1.1 Installation
------------------

To use this module, simply require them in your ‘init.el’ at the
appropriate points.

     ;; add crafted-org package definitions to selected packages list
     (require 'crafted-org-packages)

     ;; install the packages
     (package-install-selected-packages :noconfirm)

     ;; Load crafted-org configuration
     (require 'crafted-org-config)


File: crafted-emacs.info,  Node: Description,  Next: Alternative package org-roam,  Prev: Installation,  Up: Crafted Emacs Org Module

7.1.2 Description
-----------------

The ‘crafted-org’ module configures various settings related to
‘org-mode’ as well as installing a few additional related packages to
enhance the experience.

   • ‘org-return-follows-link’: ‘t’

     Pressing ‘<RET>’ while the cursor is over a link will follow the
     link.

   • ‘org-mouse-1-follows-link’: ‘t’

     Pressing ‘<Mouse 1>’ (usually left-click) while the cursor is over
     a link will follow the link.

   • ‘org-link-descriptive’: ‘t’

     Display links in a prettified style, only showing the description
     (if provided).

   • New ‘org-mode-hook’: ‘org-indent-mode’

     Visually indent org-mode files to a given header level.

   • ‘org-hide-emphasis-markers’: ‘t’

     Hides emphasis markers like ‘*bold*’ or ‘=highlighted=’.

   • New ‘org-mode-hook’:

     Adding a hook to org-mode setting the local
     ‘electric-pair-inhibit-predicate’ value to ignore ‘<’ for
     auto-pairing.

   • ‘Package: denote’

     Denote is a simple note-taking system for Emacs.  It is entirely
     based around file-naming conventions.

     It works with org, markdown and even basic text (txt) notes.  If
     you have denote installed, *note denote: (denote)Top.

   • ‘Package: org-appear’

     org-appear automatically toggles the appearance of certain elements
     in org-mode when editing in the surrounded region.  This is
     combined with the org-mode setting ‘org-hide-emphasis-markers’ to
     only show markers when editing a region.

     org-appear-mode is added as a hook to ‘org-mode-hook’, enabling
     when visiting an org-mode buffer.


File: crafted-emacs.info,  Node: Alternative package org-roam,  Prev: Description,  Up: Crafted Emacs Org Module

7.1.3 Alternative package: ‘org-roam’
-------------------------------------

‘org-roam’ is an alternative package option to ‘denote’.  Compared to
denote, it uses a SQLite database to organize notes and links.  It
requires a C compiler as an external dependency to interface with the
database.

   Installation:

     (add-to-list 'package-selected-packages 'org-roam)
     (package-install-selected-packages :noconfirm)

   Example configuration:

     ;; Setting the storage directory:
     ;; Stores org-roam data in a subdirectory under the emacs directory
     (customize-set-variable 'org-roam-directory
                             (expand-file-name "org-roam" user-emacs-directory))

     ;; If you're using a vertical completion framework, you might want a
     ;; more informative completion interface:
     (when (or (bound-and-true-p fido-vertical-mode)
               (bound-and-true-p icomplete-vertical-mode)
               (bound-and-true-p vertico))
       (customize-set-variable 'org-roam-node-display-template
                               (concat "${title:*} "
                                       (propertize "${tags:10}" 'face 'org-tag))))

     ;; suggested keymap based on example from project documentation
     (keymap-global-set "C-c r l" #'org-roam-buffer-toggle)
     (keymap-global-set "C-c r f" #'org-roam-node-find)
     (keymap-global-set "C-c r g" #'org-roam-graph)
     (keymap-global-set "C-c r i" #'org-roam-node-insert)
     (keymap-global-set "C-c r c" #'org-roam-capture)
     (keymap-global-set "C-c r j" . org-roam-dailies-capture-today)

     ;; Enable automatic sync of the SQLite database
     (org-roam-db-autosync-mode)


File: crafted-emacs.info,  Node: Troubleshooting,  Next: MIT License,  Prev: Modules,  Up: Top

8 Troubleshooting
*****************

Some tips when things don’t seem to work right.

* Menu:

* A package (suddenly?) fails to work::


File: crafted-emacs.info,  Node: A package (suddenly?) fails to work,  Up: Troubleshooting

8.1 A package (suddenly?) fails to work
=======================================

This scenario happened frequently when upgading to Emacs 28.  It also
may occur in other scenarios as well.  Usually, you will see some
message indicating some symbol is void or some function or command does
not exist.  More often than not, the package maintainer is using a
feature from another package which has not yet been released.  The new
feature is available in the development version of the package however.

   Here are some example issues where things went wrong:
   • Wrong number of arguments error
     (https://github.com/SystemCrafters/crafted-emacs/issues/126)
   • Example config doesn’t start
     (https://github.com/SystemCrafters/crafted-emacs/issues/132)
   • there are some bugs in package "helpful"
     (https://github.com/SystemCrafters/crafted-emacs/issues/140)

   Here are some strategies:

   • Check the code on the package source control page (ie GitHub,
     GitLab or whatever), and make sure the missing code is present on
     the ‘master’ branch.
   • Look at the code associated with the released version (you need to
     look at the most recent tag for this).  If the code is missing
     there, ask the maintainer for a new release.  Often, there are
     years between releases of Emacs packages, but that depends
     completely on the package maintainer.  Some of them release more
     frequently, others only on request.

   Once you have done the steps above, you can choose to take one of
these actions in your configuration:

   • Option 1
        • Use ‘M-x list-packages’ to display the list of packages.
        • Find the package in the list which doesn’t work for you, it
          will have either the _installed_ or _dependency_ status.
        • Press the ‘enter’ key to get more details on the package an
          look near the bottom of the metadata, you should see a line
          with "Other Versions".  Choose the development version - it
          will have a version number that looks like a date and the text
          ‘(melpa)’ next to it.  Press ‘enter’ on this version.
        • Following the step above will take you to the same package but
          from the MELPA repository, and you’ll see a button at the top
          labeled ‘Install’.  Click this button.
        • *Optionally* you can go back to the list of packages, find
          previous installed version, press the letter ’D’ and then the
          letter ’X’ to uninstall that version.
        • Restart Emacs
   • Option 2
        • Edit your ‘early-config.el’ file.
        • Near the bottom, add a line similar to this to pin the
          offending package to MELPA (make sure to replace
          _package-name_ with the name of the actual package):

               (add-to-list 'package-pinned-packages (cons 'package-name "melpa"))

        • Use ‘M-x package-list-packages’ to display the list of
          packages.
        • Find the package in the list, press the letter ’D’ and the
          letter ’X’ to uninstall that package.
        • Restart Emacs, the package should be installed from MELPA thus
          using the development version of the package instead of the
          released version.

   Regardless, always feel free to open an issue here and we can help
you out.  Please be as complete as possible in your description of the
problem.  Include any stack traces Emacs provides (ie start Emacs with:
‘emacs --debug-init’), mention the version number of the package you are
installing, and anything you might have tried but which didn’t work for
you.


File: crafted-emacs.info,  Node: MIT License,  Prev: Troubleshooting,  Up: Top

Appendix A MIT License
**********************

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.



Tag Table:
Node: Top1410
Node: Goals3584
Node: Principles4634
Node: Minimal modular configuration4965
Node: Prioritize built-in Emacs functionality5601
Node: Can be integrated with a Guix configuration6395
Node: Helps you learn Emacs Lisp6952
Node: Reversible7487
Node: Why use it?7758
Node: Getting Started8435
Node: Starting from scratch8656
Node: Prerequisites9502
Node: Early Emacs Initialization10604
Node: Emacs Initialization12963
Ref: Basic Configuration14346
Node: Starting from an existing configuration17044
Node: Crafted Modules with use-package19249
Node: Crafted modules with externally installed Emacs packages20328
Node: Customization21712
Node: Managing packages21955
Node: Configuring a package manager22209
Node: Installing packages25622
Node: Using alternate package managers27265
Node: Example Configuration28932
Ref: org1fbd04829117
Node: The customel file29650
Node: Simplified overview of how Emacs Customization works30032
Node: Loading the customel file31750
Ref: customel32923
Node: Contributing33585
Node: Modules34213
Node: Crafted Emacs Org Module35141
Node: Installation35351
Node: Description35845
Node: Alternative package org-roam37705
Node: Troubleshooting39505
Node: A package (suddenly?) fails to work39741
Node: MIT License43529

End Tag Table


Local Variables:
coding: utf-8
End:
