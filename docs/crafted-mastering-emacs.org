* Crafted Mastering Emacs Module

  To use this module, simply require it in your config.

  This module is inspired by the book "Mastering Emacs" by Mickey
  Petersen.  Most of the configuration does not add any additional
  packages, preferring to use built-in functionality instead.  Similar
  in nature to the =crafted-defaults= module, this makes an attempt to
  configure Emacs nicely in the general case.  Using this module alone
  will provide you with a nicely working and functional Emacs.

  
** Completions

   If you are aware of Selectrum, Vertico, Marginalia, Consult, etc,
   this section will be of interest to you.  The settings here largely
   replace those packages.

   - =completion-cycle-threshold= : =3=

     The number of completion candidates below which cycling will be
     used. This is to avoid cycling over hundreds of possible
     completions.  Once the list of completions is limited to three or
     less, pressing the TAB key will cycle through the list.

   - =tab-always-indent= : ='complete=

     Controls the operation of the TAB key.  This setting causes TAB
     to first try to indent the line.  If the line is already
     indented, then TAB will attempt to complete the thing at point.

   - =completion-category-overrides= : ='((file (styles . (partial-completion))))=

     Sets the completion style for the category =file=.  Thus when
     completing a filename, the =partial-completion= style is
     used.  This will override the default completion style.

   - =completions-detailed= : =t=

     This will display completions with details added as
     prefix/suffix.  This makes some commands (for instance, C-h o)
     provide a detailed view with more information prepended or
     appended to completions.

   - =fido-vertical-mode=

     Turns on Fake IDO (Interactive Do) mode using a vertical layout.
     This is a mini-buffer UI and is used when the mini-buffer is
     activated, for example during searches or when using =M-x=. 

** Window configuration

   - Help windows :
     1. First try to find an existing =*Help*= window and reuse that
        one.
     2. If there is no =*Help*= window, pop up a new window for that
        buffer.
     3. Whenever displaying the =*Help*= window, it should not display
        in the currently selected window. 

   - Completions windows :
     1. First try to find an existing =*Help*= window and reuse that
        one.
     2. If there is no =*Help*= window, pop up a new window for that
        buffer.
     3. Whenever displaying the =*Help*= window, it should not display
        in the currently selected window.
     4. Set the completions window height to 10 rows.

   - =switch-to-buffer-in-dedicated-window= : ='pop=

     Pop buffers in a dedicated window.  Dedicated windows are special
     windows in Emacs which are locked to the buffer they display.  So
     any attempt to switch the buffer in that window will just display
     the buffer in a different window.

   - =switch-to-buffer-obey-display-actions= : =t=

     This treats manual buffer switching (interactively from the
     keyboard) the same way programmatic buffer switching works.
     Which means, the rules for the =*Help*= and =*Completions*=
     windows are obeyed when manually switching buffers or when doing
     so from elisp. 

   - =winner-mode= :

     This mode is turned on to enable "undo" functionality for
     resetting your window layout.  Thus, if you accidentally close a
     window, pressing control left arrow (normally assigned to
     =winner-undo=) will reopen the window you closed.
     
** Buffer management

   This configuration prefers =ibuffer= for buffer management.  It is
   quite featureful.  The normal keybinding for =list-buffers= is =C-x
   C-b=, which is remapped to =ibuffer-list-buffers=. 

   - =ibuffer-movement-cycle= : =nil=

     Turn off forward and backward movement cycling when reaching the
     top or bottom of the list of buffers.

   - =ibuffer-old-time= : =24=

     Set the number of hours before a buffer is considered "old" by
     ibuffer.

** Spell checking

   If a spell checker is installed and the executable can be found,
   then =flyspell-mode= is turned on for text modes and
   =flyspell-prog-mode= is turned on for programming modes.

   In programming modes, spell checking is only performed in comments.

** Additional packages

   - =hydra=

     If the =hydra= package is not already installed as a dependency
     to another package you might have installed, calling the command:

     #+begin_src emacs-lisp
       (enable-hydra-package)
     #+end_src

     in your =config.el= file.

     A hydra will display a list of commands in a window when
     summoned.  This is a handy tool for calling commands for which
     you don't recall the keybinding or the name.

   - =dumb-jump=

     Dumb jump provides "jump to definition" support for 50+
     programming languages.  It provides a xref-based interface for
     jumping to definitions and is based on tools such as =grep=,
     =the silver searcher=, =ripgrep=, or =git-grep=.

     The =dumb-jump-xref-activate= command is added to the
     =xref-backend-functions= hook, which is how it is enabled.

     - =xref-show-definitions-function= :
       =xref-show-definitions-completing-read=

       This setting uses the completion system instead of a popup
       window, in this case =fido-mode=, or possibly =consult= if you
       have configured that instead.

     - if =hydra= is installed, a hydra is created and displayed, by
       default when the key =C-M-y= is pressed to jump to a
       definition. 
